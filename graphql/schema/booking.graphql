type Query {
  artistBookings(statuses: [BookingStatus]): [Booking!]!
  artistBooking(id: ID!): Booking!
  customerBookings(status: BookingStatus): [Booking!]!
  customerBooking(id: ID!): Booking!
}

type Mutation {
  customerCreateBooking(input: CustomerCreateBookingInput!): Booking!
  artistCreateBooking(input: ArtistCreateBookingInput!): Booking!
  artistUpdateBookingStatus(
    id: ID!
    status: BookingStatus!
    duration: Int
  ): Booking!
  deleteBooking(id: ID!): Booking
}

type Booking {
  id: ID!
  artistId: ID
  userId: ID!
  tattooId: ID!
  type: BookingType!
  createdAt: Date
  updatedAt: Date
  status: BookingStatus!
  startDate: Date
  endDate: Date
  artist: User
  customer: User
  tattoo: Tattoo
  completedAt: Date
  duration: Float
  totalDue: Int
  paymentReceived: Boolean!
  payment: Payment
}

enum BookingType {
  CONSULTATION
  TATTOO_SESSION
}

enum BookingStatus {
  PENDING
  CONFIRMED
  COMPLETED
  REJECTED
  CANCELLED
}

input CustomerCreateBookingInput {
  artistId: ID
  date: Date
  title: String
  description: String
}

input TattooForBookingInput {
  date: Date
  title: String
  description: String
  style: TattooStyle
  color: TattooColor
  imagePaths: [String!]
  placement: String
}

input ArtistCreateBookingInput {
  customerEmail: String!
  startDate: Date!
  endDate: Date
  tattooId: ID
  tattoo: TattooForBookingInput
  title: String
  type: BookingType
}
