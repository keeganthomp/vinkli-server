#scalars
scalar Date

enum UserType {
  ARTIST
  CUSTOMER
}

# types
type User {
  id: ID!
  createdAt: Date!
  updatedAt: Date!
  email: String
  phone: String!
  name: String
  userType: UserType
  stripeAccountId: String
  stripeCustomerId: String
  hasOnboardedToStripe: Boolean # for artists stripe connect
  hourlyRate: Int
  consultationFee: Int
}

type Artist {
  id: ID!
  createdAt: Date!
  updatedAt: Date!
  email: String
  phone: String!
  name: String
  stripeAccountId: String
  hasOnboardedToStripe: Boolean
  hourlyRate: Int
  consultationFee: Int
}

type ArtistPayment {
  createdAt: Date!
  updatedAt: Date!
  artistId: ID
  artist: User
  customerId: ID!
  customer: User!
  amount: Int!
  currency: String!
  description: String
  status: String!
  stripeChargeId: String!
  stripeTransferId: String!
  stripeTransferReversalId: String
  stripeRefundId: String
  stripeRefundReversalId: String
}

type ArtistPaymentPayload {
  payments: [ArtistPayment!]!
  totalReceived: Int!
}

input OnboardUserInput {
  name: String!
  userType: UserType!
}

# queries
type Query {
  user: User!
  artist: Artist!
  users: [User]!
  checkIfUserOnboarded(phone: String!): Boolean!
  publicArtistProfile(artistId: ID!): Artist!
  existingCustomer(phone: String!): User
}
# mutations
type Mutation {
  generateStripeConnectOnboardingLink: String!
  updateArtistRates(hourlyRate: Int, consultationFee: Int): Artist!
  onboardUser(input: OnboardUserInput!): User!
}
